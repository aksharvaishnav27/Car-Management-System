/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.15
 * Generated at: 2023-11-22 10:12:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.io.*;

public final class profileFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"userdetail.css\">\r\n");
      out.write("    <title>CARDX - User Detail</title>\r\n");
      out.write("</head>\r\n");
      out.write("<style> body {\r\n");
      out.write("    font-family: Arial, sans-serif;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    background-color: #121111;\r\n");
      out.write("    color: white;\r\n");
      out.write("    text-shadow: 1px 1px blueviolet;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("header {\r\n");
      out.write("    background-color: #333;\r\n");
      out.write("    color: white;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    padding: 10px 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-card {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    margin: 20px;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    border-radius: 10px;\r\n");
      out.write("    background-color: rgb(4, 4, 4);\r\n");
      out.write("    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);\r\n");
      out.write("    transition: box-shadow 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-card:hover {\r\n");
      out.write("    box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.3);\r\n");
      out.write("    border-color: #4caf50;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-photo {\r\n");
      out.write("    margin-right: 20px;\r\n");
      out.write("    border-radius: 10px;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("}\r\n");
      out.write(".edit-button{\r\n");
      out.write("    margin-top: 20px;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    color: rgb(87, 0, 128);\r\n");
      out.write("    \r\n");
      out.write("    border: solid rgb(220, 208, 208) 2px;\r\n");
      out.write("    border-radius: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-photo img {\r\n");
      out.write("    width: 250px;\r\n");
      out.write("    height: 250px;\r\n");
      out.write("    max-width: 100%;\r\n");
      out.write("    height: auto;\r\n");
      out.write("    transition: transform 0.3s ease-in-out;\r\n");
      out.write("    border-radius: 50%;\r\n");
      out.write("    border-bottom: 5px solid #535b53;\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write(".user-photo .edit-button:hover {\r\n");
      out.write("  background-color: greenyellow;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write(".user-photo img:hover {\r\n");
      out.write("    transform: scale(3);\r\n");
      out.write("    border: inherit whitesmoke 2px;\r\n");
      out.write("    border-radius: 5%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-details table {\r\n");
      out.write("    border-bottom: 5px solid rgb(50, 62, 74);\r\n");
      out.write("    font-family: 'Times New Roman', Times, serif;\r\n");
      out.write("    font-size: 18px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-details table td {\r\n");
      out.write("    padding: 10px;\r\n");
      out.write(" border-bottom:1px solid #6a3b3b;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Style the last row of the table */\r\n");
      out.write(".user-details table tr:last-child td {\r\n");
      out.write("    /* border: none; */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Add additional styles as needed */\r\n");
      out.write("/* Styles for the bargain requests section */\r\n");
      out.write(".bargain-requests {\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("}\r\n");
      out.write(".bargain-reqtitle{\r\n");
      out.write("    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n");
      out.write("    background-color: #4caf50;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("}\r\n");
      out.write(".request {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    margin-bottom: 20px;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border: 1px solid #ccc;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-details {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-avatar {\r\n");
      out.write("    width: 50px;\r\n");
      out.write("    height: 50px;\r\n");
      out.write("    border-radius: 50%;\r\n");
      out.write("    margin-right: 10px;\r\n");
      out.write("}\r\n");
      out.write(".servicedetail{\r\n");
      out.write("    color: whitesmoke;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    background-color: rgb(10, 10, 10);\r\n");
      out.write("    opacity: 75%;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    border: inset 2px;\r\n");
      out.write("    border-radius: 50px;\r\n");
      out.write("}\r\n");
      out.write(".buttons button {\r\n");
      out.write("    padding: 10px 20px;\r\n");
      out.write("    margin-left: 10px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write(".reqstatus{\r\n");
      out.write("    padding: 5px;\r\n");
      out.write("    background-color: rgb(19, 19, 105);\r\n");
      out.write("    color: white;\r\n");
      out.write("    text-shadow: 2px 2px green;\r\n");
      out.write("    border: inset white 2px;\r\n");
      out.write("    border-radius: 20px;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write(".accept-button {\r\n");
      out.write("    background-color: #4caf50;\r\n");
      out.write("    color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".reject-button {\r\n");
      out.write("    background-color: #f44336;\r\n");
      out.write("    color: white;\r\n");
      out.write("}</style>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
   String email1=(String) session.getAttribute("email");
    String name = (String) session.getAttribute("first_name") + " " + (String) session.getAttribute("last_name");
    String pincode1 = (String) session.getAttribute("pin_code");
    String area1 = (String) session.getAttribute("city");
    String mobile1 = (String) session.getAttribute("mobile");
    String area = (String) session.getAttribute("apt_name") + ", " + (String) session.getAttribute("area_name") + ", " + (String) session.getAttribute("city") + ", " + (String) session.getAttribute("state");
    int totalnew1=0;
    int totalold1=0;
    int totalrent1=0;
    try{
    	Class.forName("org.postgresql.Driver");
        Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "jay");
        PreparedStatement preparedStatement1 = connection.prepareStatement("select * from buy_newcar where customer_id=? ");
        preparedStatement1.setString(1, email1);
        PreparedStatement preparedStatement2 = connection.prepareStatement("select * from rent where customer_id=? ");
        preparedStatement2.setString(1, email1);
        PreparedStatement preparedStatement3 = connection.prepareStatement("select * from old_car where seller_id=? and buyer_id is not null");
        preparedStatement3.setString(1, email1);
        ResultSet totalnew=preparedStatement1.executeQuery();
        ResultSet totalrent=preparedStatement2.executeQuery();
        ResultSet totalold=preparedStatement3.executeQuery();
        
        while (totalold.next()) {
            // Retrieve the count value from the ResultSet
            totalold1++;
        //    totalold1 = totalold.getInt(1); // Assuming count(car_id) is the first (and only) column in the result
        }
        
        while (totalnew.next()) {
            // Retrieve the count value from the ResultSet
            totalnew1++; // Assuming count(car_id) is the first (and only) column in the result
        } 
        
        while (totalrent.next()) {
            // Retrieve the count value from the ResultSet
            totalrent1++;
            }
        
        totalnew.close();
        totalrent.close();
        totalold.close();
        connection.close();
        
    }

    catch (ClassNotFoundException e) {
        e.printStackTrace();
        System.out.println("PostgreSQL JDBC driver not found");
    } catch (SQLException e) {
    	//response.setContentType("text/html");
    	out.print("<h2 style='color:red'> "+e.getMessage() +"</h2>");
    	RequestDispatcher rd=request.getRequestDispatcher("/index.jsp");
    	rd.include(request, response);
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("    <h1>CARDX - User Detail</h1>\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("<div class=\"user-card\">\r\n");
      out.write("    <div class=\"user-photo\">\r\n");
      out.write("        <img src=\"https://source.unsplash.com/random/250x250?person\" alt=\"User Photo\">\r\n");
      out.write("        <div><a href=\"editprofile.jsp\"><button class=\"edit-button\">Edit-Profile</button></a></div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"user-details\">\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>Name:</td>\r\n");
      out.write("                <td>");
      out.print(name );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>Address:</td>\r\n");
      out.write("                <td>");
      out.print(area );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>City:</td>\r\n");
      out.write("                <td>");
      out.print(area1 );
      out.write(" </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>Pincode:</td>\r\n");
      out.write("                <td>");
      out.print(pincode1 );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>Phone Number:</td>\r\n");
      out.write("                <td>");
      out.print(mobile1 );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>New Cars Bought:</td>\r\n");
      out.write("                <td>");
      out.print(totalnew1 );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>Cars Sold:</td>\r\n");
      out.write("                <td>");
      out.print(totalold1 );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>Cars Rented:</td>\r\n");
      out.write("                <td>");
      out.print(totalrent1 );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Bargain Requests section -->\r\n");
      out.write("<section class=\"bargain-requests\">\r\n");
      out.write("    <!-- Example bargain request 1 -->\r\n");
      out.write("    <div class=\"bargain-reqtitle\">\r\n");
      out.write("        <h1>Sent - Bargain Requests</h1>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    ");

        try {
            int a = 100;
            int b = 101;
            Class.forName("org.postgresql.Driver");
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "jay");

            PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM bargain_request WHERE customer_id = ?");
            preparedStatement.setString(1, (String) session.getAttribute("email"));
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                a++;
                
                String  carId = resultSet.getString("car_id");
                String query = "SELECT * FROM public.old_car_model WHERE car_id = ?";
                try (PreparedStatement oldCarPreparedStatement = connection.prepareStatement(query)) {
                    oldCarPreparedStatement.setInt(1, Integer.parseInt(carId));
                    try (ResultSet oldCarResultSet = oldCarPreparedStatement.executeQuery()) {
                        if (oldCarResultSet.next()) {
                
    
      out.write("\r\n");
      out.write("                <div class=\"request\">\r\n");
      out.write("                    <div class=\"user-details\">\r\n");
      out.write("                        <img src=\"https://source.unsplash.com/random/");
      out.print( a );
      out.write("x150?person\" alt=\"User Avatar\" class=\"user-avatar\">\r\n");
      out.write("                        <div class=\"user-info\">\r\n");
      out.write("                            <h2>Robert</h2>\r\n");
      out.write("                            <p>Car Model: ");
      out.print( oldCarResultSet.getString("model") );
      out.write("</p>\r\n");
      out.write("                            <p>Car Company: ");
      out.print( oldCarResultSet.getString("company_name") );
      out.write("</p>\r\n");
      out.write("                            <p>Price: ");
      out.print( resultSet.getString("price") );
      out.write("</p>\r\n");
      out.write("                            <p>Request_time: ");
      out.print( resultSet.getString("request_time") );
      out.write("</p>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"reqstatus\">\r\n");
      out.write("                        <h1>\r\n");
      out.write("                            ");
            
                                            String buyerId = oldCarResultSet.getString("buyer_id");
                                            if (buyerId == null) {
                            
      out.write("\r\n");
      out.write("                                                Pending\r\n");
      out.write("                            ");

                                            } else if (buyerId.equals(session.getAttribute("email")) && resultSet.getString("price").equals(oldCarResultSet.getString("price")) ) {
                            
      out.write("\r\n");
      out.write("                                               Accepted\r\n");
      out.write("\r\n");
      out.write("                            ");

                                            } else {
                            
      out.write("                   \r\n");
      out.write("                                                Rejected\r\n");
      out.write("                            ");

                                            }
                                        }
                                    }
                                }
                            
      out.write("\r\n");
      out.write("                        </h1>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            ");

                }
            } catch (SQLException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"bargain-reqtitle\">\r\n");
      out.write("        <h1>Received - Bargain Requests</h1>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Example bargain request 2 -->\r\n");
      out.write("    ");

    String carId="";
        String model = "";
        String company = "";
        try {
            Class.forName("org.postgresql.Driver");
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "jay");

            // Get customer ID from the session
            String customerId = (String) session.getAttribute("email");

            // Query to get old_car information for the customer
            String oldCarQuery = "SELECT * FROM old_car WHERE seller_id = ? and buyer_id is null";
            try (PreparedStatement oldCarStatement = connection.prepareStatement(oldCarQuery)) {
            	
                oldCarStatement.setString(1, customerId);
                try (ResultSet oldCarResultSet = oldCarStatement.executeQuery()) {
                    while (oldCarResultSet.next()) {
                    	
                         carId = oldCarResultSet.getString("car_id");
                        String carDetailsQuery = "SELECT * FROM old_car_model WHERE car_id = ?";
                        
                        PreparedStatement car_statement = connection.prepareStatement(carDetailsQuery);
                        car_statement.setInt(1, Integer.parseInt(carId));

                        try (ResultSet carResultSet = car_statement.executeQuery()) {
                            if (carResultSet.next()) {
                                model = carResultSet.getString("model");
                                company = carResultSet.getString("company_name");
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

                        String bargainRequestQuery = "SELECT * FROM bargain_request WHERE car_id = ? and accept_time  is null";
                        

                        try (PreparedStatement bargainRequestStatement = connection.prepareStatement(bargainRequestQuery)) {
                            bargainRequestStatement.setInt(1, Integer.parseInt(carId));
                            try (ResultSet bargainRequestResultSet = bargainRequestStatement.executeQuery()) {
                                while (bargainRequestResultSet.next()) {
                                    // Get customer ID from the bargain request
                                   // out.println("hi");
                                    String customerEmail = bargainRequestResultSet.getString("customer_id");

                                    // Query to get customer information
                                    String customerQuery = "SELECT * FROM customer WHERE \"Email_id\" = ?";
                                    try (PreparedStatement customerStatement = connection.prepareStatement(customerQuery)) {
                                        customerStatement.setString(1, customerEmail);
                                        try (ResultSet customerResultSet = customerStatement.executeQuery()) {
                                            if (customerResultSet.next()) {
                                                // Display information for each received bargain request
    
      out.write("\r\n");
      out.write("                                                <div class=\"request\">\r\n");
      out.write("                                                    <div class=\"user-details\">\r\n");
      out.write("                                                        <img src=\"https://source.unsplash.com/random/140x140?person\" alt=\"User Avatar\" class=\"user-avatar\">\r\n");
      out.write("                                                        <div class=\"user-info\">\r\n");
      out.write("                                                            <h2>Model: ");
      out.print( model );
      out.write("  Company name: ");
      out.print( company );
      out.write("  </h2>\r\n");
      out.write("                                                            <h2>");
      out.print( customerResultSet.getString("first_name") );
      out.write(' ');
      out.print( customerResultSet.getString("last_name") );
      out.write("</h2>\r\n");
      out.write("                                                            <p>Email: ");
      out.print( customerResultSet.getString(1) );
      out.write("</p>\r\n");
      out.write("                                                            <p> price: ");
      out.print( bargainRequestResultSet.getString(3) );
      out.write(" </p>\r\n");
      out.write("                                                                                                     \r\n");
      out.write("                                                            <!-- Add other customer information as needed -->\r\n");
      out.write("                                                        </div>\r\n");
      out.write("                                                    </div>\r\n");
      out.write("                                                    <div class=\"buttons\">\r\n");
      out.write("                                                    <form action=\"request\" method=\"post\">\r\n");
      out.write("                                                    <input type=\"hidden\" name=\"car_id\" id=\"car_id\" value=\"");
      out.print(oldCarResultSet.getString("car_id") );
      out.write("\">\r\n");
      out.write("                                                    <input type=\"hidden\" name=\"price\" id=\"price\" value=\"");
      out.print(bargainRequestResultSet.getString(3)  );
      out.write("\">\r\n");
      out.write("                                                     <input type=\"hidden\" name=\"buyer\" id=\"buyer\" value=\"");
      out.print(customerResultSet.getString(1)  );
      out.write("\">\r\n");
      out.write("                                                     <input type=\"hidden\" name=\"seller\" id=\"seller\" value=\"");
      out.print(customerId);
      out.write("\">\r\n");
      out.write("                                                        <button class=\"accept-button\"  name =1 value=\"Accept\">Accept</button>\r\n");
      out.write("                                                        <button class=\"reject-button\" name =2 value=\"Reject\">Reject</button>\r\n");
      out.write("                                                        </form>\r\n");
      out.write("                                                    </div>\r\n");
      out.write("                                                </div>\r\n");
      out.write("\r\n");
      out.write("                                                <!-- Query to get car details from old_car_model view -->\r\n");
      out.write("                                               \r\n");
      out.write("    ");

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <!-- Add more requests as needed -->\r\n");
      out.write("    <div class=\"bargain-reqtitle\">\r\n");
      out.write("        <h1>send - Service Requests</h1>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    ");

            
            Class.forName("org.postgresql.Driver");
            Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "jay");

            //PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM service_request WHERE customer_id = ?");
            //preparedStatement.setString(1, (String) session.getAttribute("email"));
            PreparedStatement ps = con.prepareStatement("select * from service_request where (customer_id,request_time) not in (select customer_id,request_time from service_accept) and customer_id= ?");
            ps.setString(1, (String) session.getAttribute("email"));
            ResultSet rs=ps.executeQuery();
            //ResultSet resultSet = preparedStatement.executeQuery();

            while (rs.next()) {
                
            	String Address = area1+" "+(String) session.getAttribute("state");
                String des = rs.getString("description_about_service");
                       
                
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    <div class=\"request\">\r\n");
      out.write("        <div class=\"user-details\">\r\n");
      out.write("            <img src=\"https://source.unsplash.com/random/150x150?person\" alt=\"User Avatar\" class=\"user-avatar\">\r\n");
      out.write("            <div class=\"user-info\">\r\n");
      out.write("                <h2>Your request will be accepted soon</h2>\r\n");
      out.write("                <p> xx-xxxx-xxxx</p>\r\n");
      out.write("                <p>Location:");
      out.print(  Address );
      out.write("</p>         \r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"servicedetail\">\r\n");
      out.write("	            <p>Service Description:");
      out.print( des  );
      out.write("</p>\r\n");
      out.write("        	</div>\r\n");
      out.write("        <div class=\"reqstatus\">\r\n");
      out.write("           <h1>Pending</h1>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    ");

            }
    
    
      out.write("\r\n");
      out.write("    ");

            
    
            //PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM service_request WHERE customer_id = ?");
            //preparedStatement.setString(1, (String) session.getAttribute("email"));
            PreparedStatement pss;
            PreparedStatement pss1;
            PreparedStatement pss2;
            PreparedStatement ps1 = con.prepareStatement("select * from service_accept where customer_id = ?");
            ps1.setString(1, (String) session.getAttribute("email"));
            PreparedStatement ps2 = con.prepareStatement("select * from service_request where (customer_id,request_time) in (select customer_id,request_time from service_accept) and customer_id= ?");
            ps2.setString(1, (String) session.getAttribute("email"));
            ResultSet rs1=ps1.executeQuery();
            ResultSet rs2=ps2.executeQuery();
            //ResultSet resultSet = preparedStatement.executeQuery();

            while (rs1.next() && rs2.next()) {
            	

                
                String Address = area1+" "+(String) session.getAttribute("state");
                
                pss = con.prepareStatement("select * from service_request where customer_id = ? and request_time=?::timestamp");
                pss.setString(1,(String)session.getAttribute("email"));
                pss.setTimestamp(2,rs1.getTimestamp("request_time"));
                ResultSet rss=pss.executeQuery();
                rss.next();
                
                pss1 = con.prepareStatement("select * from customer where \"Email_id\"= ? ");
                pss1.setString(1,rs1.getString("mechanic_id"));
                ResultSet rss1=pss1.executeQuery();
                rss1.next();
                
                pss2 = con.prepareStatement("select * from phone_no where email_id = ? ");
                pss2.setString(1,rs1.getString("mechanic_id"));
                ResultSet rss2=pss2.executeQuery();
                rss2.next();
                
                String mname = rss1.getString("first_name")+" "+rss1.getString("last_name");
                String mmob = rss2.getString("mobile_no");
                String des = rss.getString("description_about_service");
                     
                
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    <div class=\"request\">\r\n");
      out.write("        <div class=\"user-details\">\r\n");
      out.write("            <img src=\"https://source.unsplash.com/random/150x150?person\" alt=\"User Avatar\" class=\"user-avatar\">\r\n");
      out.write("            <div class=\"user-info\">\r\n");
      out.write("                <h2>");
      out.print( mname );
      out.write("</h2>\r\n");
      out.write("                <p> ");
      out.print( mmob );
      out.write("</p>\r\n");
      out.write("                <p>Location:");
      out.print(  Address );
      out.write("</p>         \r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"servicedetail\">\r\n");
      out.write("	            <p>Service Description:");
      out.print( des  );
      out.write("</p>\r\n");
      out.write("        	</div>\r\n");
      out.write("        <div class=\"reqstatus\">\r\n");
      out.write("           <h1>Accepted</h1>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    ");

            }
    
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <!-- Add more requests as needed -->\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
